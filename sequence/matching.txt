@startuml
box Client 1
actor Player
participant GameClient
participant Network
participant BattleListManager
participant BattleMatchView
Player -> GameClient: Battle Feature
GameClient -> BattleListManager: battle()
BattleListManager -> FindMatchView: showView()
BattleListManager -> Network: getBattleList()
activate Network
Network -> BattleRequestHandler: sendGetBattleList()
BattleRequestHandler -> BattleRequestHandler: findPlayersWithRank()
BattleRequestHandler -> Network
endbox
box Server
participant RoomsHandler
participant Room
participant sGamePlayManager

endbox

loop Battle list choosing

activate GameClient
loop battle list choosing
alt out of wait time 5s
BattleListManager -> BattleListManager: increaseRankConstraint()
else choose battle
BattleListManager -> Network: joinBattle(UserID)
Network -> BattleRequestHandler: RequestBattle(player, opponent)
BattleRequestHandler -> Network2: OfferBattle(opponent)
Network2 -> BattleRequestHandler: RequestBattle(player, opponent)
BattleRequestHandler -> Network: AcceptBattle(opponent, player)
BattleRequestHandler -> RoomsHandler: startRoom()
activate RoomsHandler
RoomsHandler -> Room: initRoom(List<UserID>)
Room -> sGamePlayManager: initGamePlayManager()
Network -> RoomsHandler: sendGetRoomInfo()
Network2 -> RoomsHandler: sendGetRoomInfo()
RoomsHandler -> Network
RoomsHandler -> Network2

else out of wait time 8s
RoomsHandler -> Room: initRoomBot(UserID)
Room -> sGamePlayManager: initGamePlayManager()
Network -> RoomsHandler: sendGetRoomInfo()
RoomsHandler -> Network

end
end

box client 2
participant Network2
end box
@enduml