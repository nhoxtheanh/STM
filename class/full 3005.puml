@startuml 

class MapGUI { 
renderPlayerMap()
renderOponentMap()
renderMonster() 
renderSpell() 
renderTower()
} 

class PlayGUI { 
renderDeck()
}
  

class GamePlayManager { 

mapGUI: MapGUI 
playGUI: PlayGUI
creatureListA: Creature [] 
creatureListB: Creature [] 
towerListA: Tower [] 
towerListB: Tower [] 
cardDeck: BattleCardList
  
generateMap() 
addMapData()
spawnMonster() 
addAndCheckSpell()
addOnPlaceCardEvent()
updateMonster() 
updateTower() 
onPlaceCard() 
checkSpellEffect() 
} 

GamePlayManager -- MapGUI: have 
GamePlayManager -- PlayGUI: have
GamePlayManager -- BattleCardList: have
GamePlayManager -- Tower: have
GamePlayManager -- Creature: have
  

class Lobby { 
cardManager: CardManager 
battleScreen: Inventory 
shop: Shop 
render() 
} 


class BattleScreen { 

chessBox: ChestBox 

onGetUserInfo()
onGetUserChestBoxInfo()
render() 
renderUserInfo()
renderUserChestBoxInfo()
onStartFindingMatch() 
  
} 

  

Lobby--Inventory: have 

Lobby--BattleScreen: have 

Lobby--Shop: have 

BattleScreen--ChestBox: have

Lobby- FindMatchView 

  
class Spell { 

time: int
attribute: SpellAttribute

{static} create() 

render() 

checkTarget() 

effectTarget() 

} 

  

class FireBall { 

render() 

effectTarget() 

} 

  

class Heal { 

render() 

effectTarget() 

} 

  

class Strength { 

render() 

effectTarget() 

} 

  

class SpeedUp { 

render() 

effectTarget() 

} 

  

class Frozen { 

render() 

effectTarget() 

} 

  

class Trap { 

render() 

effectTarget() 

} 

class EffectZone { 

effectType: int

effectValue: float  

effectTime: float  

existTime: float  

damageIncrease: float  

speedIncrease: float

FindTargetTower() 

FindTargetMonsters() 

BuffEffectTower() 

DoEffectMonster() 

} 

Spell<|--Heal 

Spell<|--SpeedUp 

Spell<|--Frozen 

Spell<|--Trap 

Spell<|--Strength 

Spell<|--FireBall 

Heal -- EffectZone
SpeedUp -- EffectZone
Frozen -- EffectZone
Strength -- EffectZone
FireBall -- EffectZone

Spell - SpellAttribute: have 

LoginView - Lobby 
 
GamePlayManager--Creature 

GamePlayManager--Tower 

GamePlayManager--Spell 

 

 

class PlayerInfo{
    id: int
    name: string
    Ava: img
    credit: int
    gold: Gold
    g: G
    ==
    void getter()
    void setter()
}

  

class Attribute{ 

} 

  

class TowerAttribute{ 

    name: string 

    type: int 

    impactIndex: float 

    distance: float 

    buildingTime: timespan 

} 

  

  

class SpellAttribute { 

    type: int 

    effectType: int

    impactIndex: float  

    effectRange: float 

    effectTime: float  

    existTime: float  

    damageIncrease: float  

    speedIncrease: float  

    triggerTime: float  

} 

class CreatureAttribute{ 
    name: string 

    type: int    

    maxHp: int  

    baseSpeed: float  

    gainingEnergy: int  

    damage: int 

    size: float 

    weight: int 

} 

class MonsterAttribute{ 

    consumingEnergy: int  

    baseAmount: int 

    damage: 1 

} 

  

class BossAttribute {  

    damage: 5  

} 

class MinionAttribute {  

    damage: 1  

} 
  

class Card{
    name: string
    id: int
    requiredEnergy: int
    level: int
    avt: string
    attribute: Attribute
    size: int
    evolutionaryLv: int
    description: string
    ==
    void showGUI()
    void closeGUI()
    void levelUp()
    int checklevelUp()
    void showEvolution()
    void showInfo()
    void closeInfo()
}

  

class TowerCard{
    ability: Ability
    ==
    void showAbility()
    bool checkAbility()
}

  

class MonsterCard{

}

class SpellCard{

}

  

class Ability{
    icon: string
    ==
    void showGUI()
    void closeGUI()
}

class CardList{
    cards: Card[]
    name: string
    ==
    void sort(int)
    Card getCard()
    void removeCard()
    void insertCard(int)
    int size()
    void showGUI()
    void closeGUI()
}

  

class BattleCardList{
    cards: Card[8]
}

  

class Inventory{
    battlecards: BattleCardList
    savecards: CardList
    ==
    void showGUI()
    void closeGUI()
    void levelup()
    void checklvup()
    void selectaCard(int id)
    void startswapcard()
    void swapCard(int id, int id)
} 

  

Attribute <|-- TowerAttribute 

Attribute  <|--  SpellAttribute 

Attribute  <|-- CreatureAttribute 

CreatureAttribute <|-- MonsterAttribute 

CreatureAttribute <|-- MinionAttribute 

CreatureAttribute <|--  BossAttribute 
  

Card "1" -- "1" Attribute
Card <|-- SpellCard 
Card <|-- MonsterCard
Card <|-- TowerCard

CardList <|-- BattleCardList

CardList "1" -- "1.." Card
Inventory "1" -- "1.." CardList

TowerCard "1" -- "1" Ability

  

  

  

class Chest{
    name: string
    icon: string
    state: int
    time: time
    minGold: Gold
    maxGold: Gold
    openPrice: Currency
    cards: Card[]
    cardtype: int[]
    ==
    void open()
    void showGUI()
    void closeGUI()
    void showInfo()
    void closeInfo()
    void checkG()
    void unlock()
    void unlocknow()
    void showReceive(Currency, Card[])
    void closeReceive()
    void showCountdown()
}

  

class ChestBox{
    chests: Chest[4]
    ==
    void openChest(int)
    int checkFull()
    bool addChest(mingold, maxgold, cards[])
    void showFullDialog()
    void closeFullDialog()
    void removeChest(chestPos)
}

  

ChestBox "1" -- "4" Chest

  

class Currency{
    amount: int
    icon: string
    ==
    int add(Currency)
    int minus(Currency)
}

class Gold{}

class G{}

class ShopItem{
    objects: Object
    price: Currency
    ==
    void setter()
    void getter()
    void showInfo()
    void closeInfo()
    bool checkBuy()
    Object buy()
    void showGUI()
    void closeGUI() 
    void showReceive()
    void closeReceive()
}

  

class OnceShopItem{
    state: bool
}


class ShopItemList{
    items: ShopItem[]
    name: string
    ==
    void ShowGUI()
    void closeGUI()
}

class TimedShopItemList{
    renewTime: time
    ==
    void renew()
}

class Shop{
    list: ShopItemList[]
    ==
    void showGUI()
    void closeGUI()
}

  

Currency <|-- Gold
Currency <|-- G

ShopItem <|-- OnceShopItem

ShopItem "1" -- "1" Currency

ShopItemList <|-- TimedShopItemList

ShopItem "1.." -- "1" ShopItemList

Shop "1" -- "1.." ShopItemList


  

  

  

  

class Login{
    id: string
    ==
    void callLogin()
}

 

class Creature{ 

id: int 

isActive: bool 

target: int 

position: Point 

hp: int 

speed: float 

== 

AttackBase() 

MoveOnPath() 

GetHit() 

GetEffect() 

GetKilled() 

Generate() 

GetBuff() 

} 

  

  

class Monster{ 

attribute: MonsterAttribute

summoner: int 

dodgeRate: float 

isBallonMonster: bool 

} 

  

interface I_BalloonMonster{ 

isBalloonMonster: true 

balloonCountDown: timespan 

gesture: string 

== 

GetBalloonBuff() 

} 

  

interface I_InfantryCreature{ 

isFlyer: false 

== 

FindPath() 

Collide() 

} 

  

class InfantryMonster{ 

} 

  

class FlyingMonster{ 

isFlyer: true 

} 

  

class Swordsman{ 

type: 1 

} 

class Assassin{ 

type: 2 

} 

class Giant{ 

type: 3 

} 

class Ninja{ 

type: 4 

== 

Burrow() 

} 

class Bat{ 

type: 5 

} 

  

  

class Minion{ 

attribute: MinionAttribute

} 

  

class Boss{ 

attribute: BossAttribute

== 

MoveEffect() 

} 

  

class InfantryBoss{ 

} 

  

class DarkGiant{ 

type: 1 

} 

class Satyr{ 

type: 2 

} 

class DesertKing{ 

type: 3 

} 

class Iceman{ 

type: 4 

} 

class Golem{ 

type: 5 

} 

class DemonTree{ 

type: 6 

} 

  

Creature <|-- Monster 

Creature <|-- Minion 

Creature <|--  Boss 

  

Monster <|-- InfantryMonster 

Monster <|-- FlyingMonster 

  

InfantryMonster <|-- Swordsman 

InfantryMonster <|-- Assassin 

InfantryMonster <|--  Giant 

InfantryMonster <|--  Ninja 

  

FlyingMonster <|-- Bat 

  

Boss <|-- InfantryBoss 

  

InfantryBoss  <|-- DarkGiant 

InfantryBoss  <|-- Satyr 

InfantryBoss  <|-- DesertKing 

InfantryBoss  <|-- Iceman 

InfantryBoss  <|-- Golem 

InfantryBoss  <|-- DemonTree 

  

I_BalloonMonster <|.. Monster 

  

I_InfantryCreature <|.. InfantryMonster 

I_InfantryCreature <|.. InfantryBoss 

I_InfantryCreature <|.. Minion 

 

 

class Tower { 

id: int 

isActive: bool 

summoner: int 

position: Point 

evolutedLevel: int 

attribute: TowerAttribute

Build() 

Destroy() 

GetEffect() 

GetBuff() 

Upgrade() 

} 

  

class AttackTower { 

towerClass: 1 

targetDeterminingMethod: int 

shootingSpeed: float 

AttackTarget() 

DetermineTarget() 

ChangeTargetDeterminingMethod() 

} 

  

class MagicTower { 

towerClass: 2 

shootingSpeed: float 

MagicalAttack() 

} 

  

class SupportTower { 

towerClass: 3 

ActiveBuffEffectZone() 

} 

  

class Cannon { 

type: 1 

} 

  

class Wizard { 

type: 2 

} 

  

class Boomerang { 

type: 3 

} 

  

class OilGun { 

type: 4 

} 

  

class IceGun { 

type: 5 

} 

  

class AttackSpeed { 

type: 6 

} 

  

class Damage { 

type: 7 

} 

  

class Cannon_Bullet { 

type: 1 

} 

  

class Wizard_Bullet { 

type: 2 

} 

  

class Boomerang_Bullet { 

type: 3 

} 

  

class Oilgun_Bullet { 

type: 4 

} 

  

class Icegun_Bullet { 

type: 5 

} 

  

class AttackSpeed_Zone { 

type: 6 

} 

  

class Damage_Zone { 

type: 7 

} 

  

class Bullet { 

startPos: Point 

desinationPos: Point 

targetType: int 

damageType: int 

targetLockType: int 

effectRange: float 

bulletSpeed: int 

effectType: int 

Shoot() 

DoDamageAndEffect() 

Destroy() 

FindTarget() 

} 

  

class BuffEffectZone { 

targetType: int 

damageType: int 

effectType: int 

BuffEffectTower() 

FindTargetTower() 

FindTargetMonsters() 

DoEffectMonster() 

} 

  

class ActiveZone { 

centerPoint: Point 

effectRadius: float 

Destroy() 

} 

  

Tower <|-- AttackTower 

Tower <|-- MagicTower 

Tower <|-- SupportTower 

AttackTower <|-- Cannon 

AttackTower <|-- Wizard 

AttackTower <|-- Boomerang 

MagicTower <|-- OilGun 

MagicTower <|-- IceGun 

SupportTower <|-- AttackSpeed 

SupportTower <|-- Damage 

Cannon -- Cannon_Bullet 

Wizard -- Wizard_Bullet 

Boomerang -- Boomerang_Bullet 

OilGun -- Oilgun_Bullet 

IceGun -- Icegun_Bullet 

AttackSpeed -- AttackSpeed_Zone 

Damage -- Damage_Zone 

  

Cannon_Bullet --|> Bullet 

Wizard_Bullet --|> Bullet 

Boomerang_Bullet --|> Bullet 

Oilgun_Bullet --|> Bullet 

Icegun_Bullet --|> Bullet 

AttackSpeed_Zone --|> BuffEffectZone 

Damage_Zone --|> BuffEffectZone 

  

ActiveZone <|-- BuffEffectZone 
ActiveZone <|-- EffectZone 

  

Cannon -- ActiveZone 

Wizard -- ActiveZone 

Boomerang -- ActiveZone 

OilGun -- ActiveZone 

IceGun – ActiveZone 

 

 

 

skinparam packageStyle rectangle 

skinparam classAttributeIconSize 0 

  

package Client { 

class LoginView { 

+showView(): void 

} 

  

class LoginAction { 

-username: string 

-password: string 

-status: string 

+authenticate(): void 

+initClient(): void 

} 

  

LoginView "1" -- "1" LoginAction 

  

class Client { 

-token: string 

-user: User 

+gameView(): void 

} 

  

class ServerMessageManager { 

-connectionStatus: int 

-packageStatus: int 

-socket: Socket 

+receiveMessage(): void 

+sendMessage(): void 

} 

  

class User { 

-avatar: Image 

-name: string 

-level: int 

-rank: int 

-currencys: array<Currency> 

} 

  

Client o- User 

LoginAction "1" -- "0..1" Client 

LoginAction "1" - "1" ServerMessageManager 

} 

  

package Server { 

class Server { 

-authenticatorThread: Thread 

+initAuthenticator(): void 

} 

  

class AccountManager { 

+authenticateUser(): string 

} 

  

class ClientMessageManager { 

-userConnections: array<UserConnection> 

+receiveMessage(): string 

+sendMessage(): void 

} 

  

class UserConnection { 

-socket: Socket 

-status: int 

+initTCPConnection(): void 

} 

  

Server o- ClientMessageManager 

Server o-- AccountManager 

ClientMessageManager "1" -- "0..*" UserConnection 

} 

 

 

skinparam packageStyle rectangle 

skinparam classAttributeIconSize 0 

  

package Client { 

  

class Client { 

-token: string 

-user: User 

-battleListManager: BattleListManager 

-playerID: string 

+lobbyView(): void 

+battle(): void 

} 

  

class ServerMessageManager { 

-connectionStatus: int 

-packageStatus: int 

-socket: Socket 

+receiveMessage(): void 

+sendMessage(): void 

} 

  

class BattleListManager { 

-battleList: priorityQueuePool<UserID> 

-gamePlayManager: GamePlayManager 

-waitTime: Time 

-inputStream: istream 

-outputStream: ostream 

-playerBattleId: string 

-findMatchView: FindMatchView 

-rankConstraint: int 

+joinBattle(UserID: string): void 

+getBattleList(): void 

+checkBattle(UserID: string): void 

+leaveBattle(): void 

+showBattle(): void 

+listenerThread(): void 

+senderThread(): void 

+increaseRankConstraint(): void 

} 

  

class GamePlayManager {} 

  

class FindMatchView { 

-duration: Time 

+showView(): void 

} 

  

class User { 

-avatar: Image 

-name: string 

-level: int 

-rank: int 

-currencys: array<Currency> 

} 

  

Client o-- User 

BattleListManager o-- GamePlayManager 

BattleListManager *-- FindMatchView 

BattleListManager "1" - "1" ServerMessageManager 

Client o- BattleListManager 

} 

  

package Server { 

class Server { 

-channelThread: Thread 

-battleQueue: BattleQueueManager 

-battleManager: BattleManager 

+createNewChannel(userID1: string, userID2: string): void 

+getBattleQueue(): void 

} 

  

class AccountManager { 

+getUserRank(PlayerID: string): int 

} 

  

class BattleQueueManager { 

-battleList: Tree<UserID> 

+findPlayerRank(numOfPlayer: int, rank: int): int 

} 

  

class ClientMessageManager { 

-userConnections: array<UserConnection> 

+receiveMessage(): string 

+sendMessage(): void 

} 

  

class UserConnection { 

-socket: Socket 

-status: int 

+initTCPConnection(): void 

} 

  

Interface BattleManager { 

+initGamePlay() 

+updateGameState() 

} 

  

class BattlePlayerManager { 

-userID1: string 

-userID2: string 

-state: int 

+initGameplay() 

+updateGameState() 

} 

  

ClientMessageManager -o Server 

ClientMessageManager "1" -- "0..*" UserConnection 

Server o- BattleQueueManager 

BattleQueueManager "1" -- "1" AccountManager 

Server o-- BattlePlayerManager 

BattlePlayerManager --|> BattleManager 

} 

 

skinparam packageStyle rectangle 

skinparam classAttributeIconSize 0 

  

  

package Server { 

class Server { 

-channelThread: Thread 

-battleQueue: BattleQueueManager 

-battleManager: BattleManager 

+createNewChannel(userID1: string, userID2: string): void 

+getBattleQueue(): void 

} 

  

class AccountManager { 

+getUserRank(PlayerID: string): int 

} 

  

class BattleQueueManager { 

-battleList: Tree<UserID> 

+findPlayerRank(numOfPlayer: int, rank: int): int 

} 

  

Interface BattleManager { 

+initGamePlay() 

+updateGameState() 

} 

  

class BattleBotManager { 

-userID1: string 

-bot: Bot 

-state: int 

+initGameplay() 

+updateGameState() 

} 

  

class Bot { 

-botState: int 

+initTower(): void 

+initMonster(): void 

+initSpell(): void 

+findOptimalPath(): void 

+action(): Action 

} 

  

Interface Action { 

+Energy: int 

} 

  

class Attack { 

+spell(): void 

+createMonster(): void 

} 

  

class Defense { 

+buildTower(): void 

} 

  

Attack <|-- Action 

Defense <|-- Action 

Action "1..*" - "1" Bot 

Server o- BattleQueueManager 

BattleQueueManager "1" -- "1" AccountManager 

Server o-- BattleBotManager 

BattleBotManager --|> BattleManager 

Bot -o BattleBotManager 

} 

@enduml 